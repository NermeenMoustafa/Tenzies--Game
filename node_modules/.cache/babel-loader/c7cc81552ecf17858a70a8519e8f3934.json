{"ast":null,"code":"var _jsxFileName = \"C:\\\\Nermeen\\\\Learn_React\\\\Tenzies Game\\\\src\\\\components\\\\Main.js\";\n// import react, { useState } from \"react\";\n// import ToggleButton from \"../ToggleButton\";\n// import boxes from \"../Boxes\"\n// import Box from \"./Box\";\nimport Game from \"./Game\";\nimport \"../styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Main() {\n  // const [isGoodTonight, setIsGoodTonight] = react.useState(true)\n  // function changeState(){\n  //     // this function to change the state based on the previous(old) one (if true => return false) and vise versa\n  //     setIsGoodTonight((prevState) =>{\n  //         return prevState? false: true\n  //     })\n  // }\n  // const [factsArray, editFactsArray] = react.useState([\"Fact 1\",\"Fact 2\"])\n  // function addFact(){\n  //     editFactsArray(prevArray => {\n  //         return [...prevArray, `Fact ${prevArray.length + 1}`]\n  //     })\n  // }\n  // const Facts = factsArray.map(fact => <li key={fact}>{fact}</li>)\n  // const [cardsData, setCardsData] = react.useState({\n  //     firstName: \"Nermeen\",\n  //     lastName: \"Moustafa\",\n  //     frontPosition: \"Front-End Developer\",\n  //     backPosition: \"Back-End Developer\",\n  //     isFrontEnd: true\n  // })\n  // function togglePosition(){\n  //     setCardsData(prev => {\n  //         if(prev.isFrontEnd)\n  //             // ...prev to get the rest of the object before edit then edit then update the old object with the new one\n  //             return{...prev, isFrontEnd:false}\n  //         else\n  //             return{...prev, isFrontEnd:true}              \n  //     })\n  // }\n  // const [squares, setSquares] = react.useState(boxes)\n  // function squareToggle(id){\n  //     setSquares(prev => {\n  //         return prev.map(square => {\n  //             return square.id === id ? {...square, on : ! square.on} : square\n  //         })\n  //     })\n  // }\n  // const squareElements = squares.map(square => (\n  //     <Box    key={square.id} \n  //             on={square.on} \n  //             toggle={() => squareToggle(square.id)}/>\n  //  ) \n  // )\n  // const [formData, setFormData] = react.useState(\n  //     {\n  //         firstName : \"\",\n  //         lastName : \"\",\n  //         email : \"\",\n  //         isKoki : false,\n  //         comments : \"\",\n  //         employmentStatus : \"\",\n  //         favColor: \"\"\n  //     }\n  // )\n  // function eventHandler(event){\n  //     const{name, value, type, checked} = event.target\n  //     setFormData(prev => {\n  //         return {\n  //             ...prev,\n  //             [name] : type === \"checkbox\" ? checked : value\n  //         }\n  //     })\n  // }\n  // function submitHandler(event){\n  //     event.preventDefault()\n  //     console.log(formData)\n  // }\n  // //use effect functio is used to run something based on the change of another thing\n  // //for example here this console.log will run each time the boolean value of \"isKoki\" will change\n  // react.useEffect(() => {\n  //     console.log(\"Effect function ran\")\n  // }, [formData.isKoki])\n  // const [starWarsData, setStarWarsData] = useState({})\n  // const [count, setCount] = useState(1)\n  // //here as i want this api call to happen once, i put an empty array in the dependency array parameter\n  // // if i put [0] or any static value that doesn't change that will be the same\n  // react.useEffect(() =>{\n  //     fetch(`https://swapi.dev/api/people/${count}`)\n  //     .then(res => res.json())\n  //     .then(data => setStarWarsData(data))\n  // }, [count])\n  // const [windowSize, setWindowSize] = useState(window.innerWidth)\n  // react.useEffect(() => {\n  //     function watchWindow(){\n  //         setWindowSize(window.innerWidth)\n  //     }\n  //     window.addEventListener(\"resize\", watchWindow)\n  //     //that return function called clean up function which help to solve memory leak problem\n  //     //memory leak problem is when this component doesn't render maybe because condition or something\n  //     // but that component still have listener to changes so this clean up function decline the things \n  //     //to stop them working in case the component doesn't render\n  //     return function(){\n  //         window.removeEventListener(\"resize\", watchWindow)\n  //     }\n  // }, [])\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 9\n  }, this);\n}\n_c = Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["C:/Nermeen/Learn_React/Tenzies Game/src/components/Main.js"],"names":["Game","Main"],"mappings":";AAAA;AACA;AACA;AACA;AACA,OAAOA,IAAP,MAAiB,QAAjB;AACA,OAAO,eAAP;;AAGA,eAAe,SAASC,IAAT,GAAe;AAE1B;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA,sBACI;AAAA,2BAEI,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,UADJ;AA+FH;KA7NuBA,I","sourcesContent":["// import react, { useState } from \"react\";\r\n// import ToggleButton from \"../ToggleButton\";\r\n// import boxes from \"../Boxes\"\r\n// import Box from \"./Box\";\r\nimport Game from \"./Game\"\r\nimport \"../styles.css\";\r\n\r\n\r\nexport default function Main(){\r\n\r\n    // const [isGoodTonight, setIsGoodTonight] = react.useState(true)\r\n\r\n    // function changeState(){\r\n    //     // this function to change the state based on the previous(old) one (if true => return false) and vise versa\r\n    //     setIsGoodTonight((prevState) =>{\r\n    //         return prevState? false: true\r\n    //     })\r\n    // }\r\n\r\n    // const [factsArray, editFactsArray] = react.useState([\"Fact 1\",\"Fact 2\"])\r\n\r\n    // function addFact(){\r\n    //     editFactsArray(prevArray => {\r\n    //         return [...prevArray, `Fact ${prevArray.length + 1}`]\r\n    //     })\r\n    // }\r\n\r\n    // const Facts = factsArray.map(fact => <li key={fact}>{fact}</li>)\r\n\r\n    // const [cardsData, setCardsData] = react.useState({\r\n    //     firstName: \"Nermeen\",\r\n    //     lastName: \"Moustafa\",\r\n    //     frontPosition: \"Front-End Developer\",\r\n    //     backPosition: \"Back-End Developer\",\r\n    //     isFrontEnd: true\r\n    // })\r\n\r\n    // function togglePosition(){\r\n\r\n    //     setCardsData(prev => {\r\n    //         if(prev.isFrontEnd)\r\n    //             // ...prev to get the rest of the object before edit then edit then update the old object with the new one\r\n    //             return{...prev, isFrontEnd:false}\r\n    //         else\r\n    //             return{...prev, isFrontEnd:true}              \r\n    //     })\r\n\r\n    // }\r\n\r\n    // const [squares, setSquares] = react.useState(boxes)\r\n\r\n    // function squareToggle(id){\r\n        \r\n    //     setSquares(prev => {\r\n    //         return prev.map(square => {\r\n    //             return square.id === id ? {...square, on : ! square.on} : square\r\n    //         })\r\n    //     })\r\n    // }\r\n\r\n    // const squareElements = squares.map(square => (\r\n    //     <Box    key={square.id} \r\n    //             on={square.on} \r\n    //             toggle={() => squareToggle(square.id)}/>\r\n    //  ) \r\n    // )\r\n\r\n    // const [formData, setFormData] = react.useState(\r\n    //     {\r\n    //         firstName : \"\",\r\n    //         lastName : \"\",\r\n    //         email : \"\",\r\n    //         isKoki : false,\r\n    //         comments : \"\",\r\n    //         employmentStatus : \"\",\r\n    //         favColor: \"\"\r\n    //     }\r\n    // )\r\n\r\n    // function eventHandler(event){\r\n\r\n    //     const{name, value, type, checked} = event.target\r\n\r\n    //     setFormData(prev => {\r\n    //         return {\r\n    //             ...prev,\r\n    //             [name] : type === \"checkbox\" ? checked : value\r\n    //         }\r\n    //     })\r\n    // }\r\n\r\n    // function submitHandler(event){\r\n    //     event.preventDefault()\r\n    //     console.log(formData)\r\n    // }\r\n\r\n    // //use effect functio is used to run something based on the change of another thing\r\n    // //for example here this console.log will run each time the boolean value of \"isKoki\" will change\r\n    // react.useEffect(() => {\r\n    //     console.log(\"Effect function ran\")\r\n    // }, [formData.isKoki])\r\n\r\n    // const [starWarsData, setStarWarsData] = useState({})\r\n    \r\n    // const [count, setCount] = useState(1)\r\n\r\n    // //here as i want this api call to happen once, i put an empty array in the dependency array parameter\r\n    // // if i put [0] or any static value that doesn't change that will be the same\r\n    // react.useEffect(() =>{\r\n    //     fetch(`https://swapi.dev/api/people/${count}`)\r\n    //     .then(res => res.json())\r\n    //     .then(data => setStarWarsData(data))\r\n    // }, [count])\r\n\r\n    // const [windowSize, setWindowSize] = useState(window.innerWidth)\r\n\r\n    // react.useEffect(() => {\r\n\r\n    //     function watchWindow(){\r\n    //         setWindowSize(window.innerWidth)\r\n    //     }\r\n\r\n    //     window.addEventListener(\"resize\", watchWindow)\r\n    //     //that return function called clean up function which help to solve memory leak problem\r\n    //     //memory leak problem is when this component doesn't render maybe because condition or something\r\n    //     // but that component still have listener to changes so this clean up function decline the things \r\n    //     //to stop them working in case the component doesn't render\r\n    //     return function(){\r\n    //         window.removeEventListener(\"resize\", watchWindow)\r\n    //     }\r\n\r\n    // }, [])\r\n\r\n\r\n    return(\r\n        <main>\r\n\r\n            <Game />\r\n            \r\n            {/* <div className=\"state\" onClick={changeState}>\r\n                <h1>Do I Feel Good Tonight? (click to toggle the answer from yes to no)</h1>\r\n                <h2>{isGoodTonight?\"Yes\":\"No\"}</h2>\r\n                {isGoodTonight && <h2>I feel Great, thanks</h2>}\r\n            </div>\r\n\r\n            <div>\r\n                <h1 className=\"Facts-header\">Fun Facts about React</h1>\r\n                <button className=\"addFactButton\" onClick={addFact}>Add Fact</button>\r\n                <ul className=\"Facts-list\">\r\n                    {Facts}\r\n                </ul>\r\n            </div>\r\n            \r\n            <article className=\"card\">\r\n                <h2>{cardsData.firstName} {cardsData.lastName}</h2>\r\n                <h2 style={{marginLeft:\"50px\"}}>{cardsData.isFrontEnd?cardsData.frontPosition:cardsData.backPosition}</h2>\r\n                <ToggleButton handleClick={togglePosition}/>\r\n            </article>\r\n\r\n            <article>\r\n                <h1 className=\"squaresHeader\">click the squares to change their color</h1>\r\n                {squareElements}\r\n            </article>\r\n\r\n            <form className=\"form\" onSubmit={submitHandler}>\r\n                <h1>Form</h1>\r\n\r\n                <input type=\"text\" placeholder=\"First Name\" name=\"firstName\" onChange={eventHandler} \r\n                        value={formData.firstName} />\r\n                <input type=\"text\" placeholder=\"Last Name\" name=\"lastName\" onChange={eventHandler}\r\n                        value={formData.lastName} />\r\n                <input type=\"email\" placeholder=\"Email\" name=\"email\" onChange={eventHandler}\r\n                        value={formData.email}/>\r\n\r\n                <br/>\r\n\r\n                <input type=\"checkbox\" id=\"kokiCheck\" checked={formData.isKoki} name=\"isKoki\" onChange={eventHandler}/>\r\n                <label htmlFor=\"kokiCheck\">Is that you, koki ?</label>\r\n\r\n                <br/>\r\n                <textarea placeholder=\"Add your comment...\" name=\"comments\" onChange={eventHandler}\r\n                         value={formData.comments}/>\r\n\r\n                <h1>you Entered : {formData.firstName} {formData.lastName} {formData.email} {formData.comments}</h1>\r\n               \r\n                <fieldset className=\"fieldSet\">\r\n                    <legend>current employment status</legend>\r\n\r\n                    <input type=\"radio\" id=\"unemployed\" name=\"employmentStatus\" value=\"Unemployed\" onChange={eventHandler} />\r\n                    <label htmlFor=\"unemployed\">Unemployed</label>\r\n                    <br/>\r\n\r\n                    <input type=\"radio\" id=\"part-time\" name=\"employmentStatus\" value=\"Part-time\" onChange={eventHandler} />\r\n                    <label htmlFor=\"part-time\">Part-time</label>\r\n                    <br/>\r\n\r\n                    <input type=\"radio\" id=\"full-time\" name=\"employmentStatus\" value=\"Full-time\" onChange={eventHandler} />\r\n                    <label htmlFor=\"full-time\">Full-time</label>\r\n\r\n                    <p>you choosed : {formData.employmentStatus}</p>\r\n              </fieldset>\r\n\r\n                <br/>\r\n\r\n                <article className=\"favColor\">\r\n                    <label htmlFor=\"favColor\">what's your favourite color?</label>\r\n                    <br/>\r\n                    <select id=\"favColor\" name=\"favColor\" value={formData.favColor} onChange={eventHandler} >\r\n                        <option value=\"\">--choose--</option>\r\n                        <option value=\"red\">red</option>\r\n                        <option value=\"green\">green</option>\r\n                        <option value=\"yellow\">yellow</option>\r\n                        <option value=\"blue\">blue</option>\r\n                    </select>\r\n                    <p>you choosed : {formData.favColor}</p>\r\n                </article>\r\n\r\n                <button>Submit Form</button>\r\n\r\n            </form>\r\n\r\n            <pre>{JSON.stringify(starWarsData, null, 2)}</pre>\r\n\r\n            <button className=\"apiButton\" onClick={() => setCount(prev => prev+1)}>Get another API</button>\r\n   \r\n            <h1 className=\"windowSize\">Window Size is {windowSize}</h1> */}\r\n\r\n        </main>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}